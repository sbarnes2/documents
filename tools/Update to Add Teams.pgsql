BEGIN;
-- Create teams for the users to exist in. 
-- this is organisational only

DROP TABLE IF EXISTS teams;

CREATE TABLE IF NOT EXISTS teams
(
	id integer NOT NULL,
	name varchar(150) not null
);

insert into teams (id,name) values (0,'Executives');
insert into teams (id,name) values (1,'Commercial');
insert into teams (id,name) values (2,'POC Sales');
insert into teams (id,name) values (3,'Global Customer Support');
insert into teams (id,name) values (4,'Systems Engineering');
insert into teams (id,name) values (5,'CFO');
insert into teams (id,name) values (6,'Accounting');
insert into teams (id,name) values (7,'Human Resources');
insert into teams (id,name) values (8,'Logistics & Supply Chain');
insert into teams (id,name) values (9,'Operations');
insert into teams (id,name) values (10,'Quality Assurance');
insert into teams (id,name) values (11,'Quality Control & Technical Product');
insert into teams (id,name) values (12,'Product Development');


-- Add users as members of a team
DROP TABLE IF EXISTS team_members;

CREATE TABLE IF NOT EXISTS 	team_members
(
   	id integer NOT NULL Generated BY DEFAULT as identity,
   	user_id integer not null,
   	user_is_manager bool not null,
   	team_id integer
);

--systems engineering
insert into team_members(user_id,user_is_manager,team_id) values (21,true,4);
insert into team_members(user_id,user_is_manager,team_id) values (32,false,4);
insert into team_members(user_id,user_is_manager,team_id) values (33,false,4);
insert into team_members(user_id,user_is_manager,team_id) values (34,false,4);
insert into team_members(user_id,user_is_manager,team_id) values (35,false,4);
insert into team_members(user_id,user_is_manager,team_id) values (36,false,4);


--Anna
insert into team_members(user_id,user_is_manager,team_id) values (56,true,0);

--The Rest as no team
insert into team_members (user_id,user_is_manager,team_id) 
select id,false,-1 from users u where u.id not in (select user_id from team_members);


-- Create a list of Users Job Titles and the Team to which the title belongs 
DROP TABLE IF EXISTS JOB_TITLES;

CREATE TABLE IF NOT EXISTS JOB_TITLES
(
   	id integer NOT NULL Generated BY DEFAULT as identity,
   	team_id integer,
   	name varchar(150)
);

--Add titles to team
insert into JOB_TITLES (id,team_id,name) values (1,4,'Senior Project Engineer');
insert into JOB_TITLES (id,team_id,name) values (2,4,'Systems Engineer');
insert into JOB_TITLES (id,team_id,name) values (3,4,'Senior Software Engineer');
insert into JOB_TITLES (id,team_id,name) values (4,4,'Engineering Technician');
insert into JOB_TITLES (id,team_id,name) values (0,4,'Senior Director, Systems Engineering');



--Assign Job Titles to Users (members).

DROP TABLE IF EXISTS USER_JOBTITLE;

CREATE TABLE IF NOT EXISTS USER_JOBTITLE
(
	id integer NOT NULL Generated BY DEFAULT as identity,
	user_id int,
	job_title_id int	
);


insert into user_jobtitle(id,user_id,job_title_id) values (0,21,0);--	Henry senior director

insert into user_jobtitle(id,user_id,job_title_id) values (1,32,3);--	Alan senior dev
insert into user_jobtitle(id,user_id,job_title_id) values (2,33,3);--	Sean senior dev
insert into user_jobtitle(id,user_id,job_title_id) values (3,34,2);--	Jawaad Systems Engineer
insert into user_jobtitle(id,user_id,job_title_id) values (4,35,1);--	Ant Senior Project Engineer
insert into user_jobtitle(id,user_id,job_title_id) values (5,36,4);--	Ian Engineering Technician




-- Assign documents to Job Roles

DROP TABLE IF EXISTS JOB_DOCUMENTS;

CREATE TABLE IF NOT EXISTS JOB_DOCUMENTS
(
	id integer NOT NULL Generated Always as identity,
   	doc_id int not null,
   	job_id int not null 
);


insert into JOB_DOCUMENTS (doc_id,job_id) values (573,3); -- Senior software engineer
insert into JOB_DOCUMENTS (doc_id,job_id) values (486,3);
insert into JOB_DOCUMENTS (doc_id,job_id) values (595,3);
insert into JOB_DOCUMENTS (doc_id,job_id) values (470,3);
insert into JOB_DOCUMENTS (doc_id,job_id) values (574,3); 
insert into JOB_DOCUMENTS (doc_id,job_id) values (65,3);
insert into JOB_DOCUMENTS (doc_id,job_id) values (595,3);
insert into JOB_DOCUMENTS (doc_id,job_id) values (1078,3);

insert into JOB_DOCUMENTS (doc_id,job_id) values (573,0); -- Senior Engineering Director
insert into JOB_DOCUMENTS (doc_id,job_id) values (486,0);
insert into JOB_DOCUMENTS (doc_id,job_id) values (595,0);
insert into JOB_DOCUMENTS (doc_id,job_id) values (470,0);
insert into JOB_DOCUMENTS (doc_id,job_id) values (574,0); 
insert into JOB_DOCUMENTS (doc_id,job_id) values (65,0);
insert into JOB_DOCUMENTS (doc_id,job_id) values (595,0);
insert into JOB_DOCUMENTS (doc_id,job_id) values (1078,0);

insert into JOB_DOCUMENTS (doc_id,job_id) values (573,2);-- Systems engineer
insert into JOB_DOCUMENTS (doc_id,job_id) values (486,2);
insert into JOB_DOCUMENTS (doc_id,job_id) values (595,2);
insert into JOB_DOCUMENTS (doc_id,job_id) values (470,2);
insert into JOB_DOCUMENTS (doc_id,job_id) values (574,2); 
insert into JOB_DOCUMENTS (doc_id,job_id) values (65,2);
insert into JOB_DOCUMENTS (doc_id,job_id) values (595,2);
insert into JOB_DOCUMENTS (doc_id,job_id) values (1078,2);

insert into JOB_DOCUMENTS (doc_id,job_id) values (573,1); -- Senior Project engineer
insert into JOB_DOCUMENTS (doc_id,job_id) values (486,1);
insert into JOB_DOCUMENTS (doc_id,job_id) values (595,1);
insert into JOB_DOCUMENTS (doc_id,job_id) values (470,1);
insert into JOB_DOCUMENTS (doc_id,job_id) values (574,1); 
insert into JOB_DOCUMENTS (doc_id,job_id) values (65,1);
insert into JOB_DOCUMENTS (doc_id,job_id) values (595,1);
insert into JOB_DOCUMENTS (doc_id,job_id) values (1078,1);


insert into JOB_DOCUMENTS (doc_id,job_id) values (573,4); -- Engineering Technician
insert into JOB_DOCUMENTS (doc_id,job_id) values (486,4);
insert into JOB_DOCUMENTS (doc_id,job_id) values (595,4);
insert into JOB_DOCUMENTS (doc_id,job_id) values (470,4);
insert into JOB_DOCUMENTS (doc_id,job_id) values (574,4); 
insert into JOB_DOCUMENTS (doc_id,job_id) values (65,4);
insert into JOB_DOCUMENTS (doc_id,job_id) values (595,4);
insert into JOB_DOCUMENTS (doc_id,job_id) values (1078,4);

COMMIT;


CREATE OR REPLACE VIEW public.user_training_needed AS
 SELECT DISTINCT ts.userid,
    u.username,
    u.email_address,
    dl.id AS documentid,
    dl.documentqtid,
    dl.documenttitle,
    ts.usercurrentrevision,
    csd.rev
   FROM (((training_status ts
     JOIN document_list dl ON ((dl.id = ts.documentid)))
     JOIN current_state_documents csd ON (((csd.documentcode)::text = (dl.documentqtid)::text)))
     JOIN users u ON ((u.id = ts.userid)))
  WHERE (((ts.usercurrentrevision)::integer < (csd.rev)::integer) OR ((ts.training_complete_date IS NULL) AND ((ts.usercurrentrevision)::text = '0'::text)))
  ORDER BY ts.userid, dl.documentqtid;